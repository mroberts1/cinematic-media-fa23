---
title: ''
author: ''
format: html
page-layout: full
observable: 'https://observablehq.com/@lsh/plot-voronoi'
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(palmerpenguins)
```

## VM303-01 Studies in Digital Media & Culture

::: {layout="[[49, -2, 49]]"}
```{ojs}
//| echo: false
TinyQueue = require("tinyqueue@2")

graphic = {
  const quads = new TinyQueue([new Quad(0, 0, width, width)], (a, b) => b.score - a.score);
  const context = DOM.context2d(width, width);
  context.canvas.style.width = "100%";
  for (let i = 0; true; ++i) {
    const q = quads.pop();
    if (q === undefined || q.score < 50) break;
    mutable score = q.score;
    for (const s of q.split()) {
      if (q.w >= 4) quads.push(s);
      context.fillStyle = s.color;
      context.fillRect(s.x, s.y, s.w, s.h);
      context.strokeRect(s.x, s.y, s.w, s.h);
    }
    if (i % 15 === 0) yield context.canvas;
  }
}

mutable score = null

width = 1024

area_power = 0.25

class Quad {
  constructor(x, y, w, h) {
    const [r, g, b, error] = colorFromHistogram(computeHistogram(x, y, w, h));
    this.x = x, this.y = y, this.w = w, this.h = h;
    this.color = `#${(0x1000000 + (r << 16) + (g << 8) + b).toString(16).substring(1)}`;
    this.score = error * Math.pow(w * h, area_power);
  }
  split() {
    const dx = this.w / 2, x1 = this.x, x2 = this.x + dx;
    const dy = this.h / 2, y1 = this.y, y2 = this.y + dy;
    return [
      new Quad(x1, y1, dx, dy),
      new Quad(x2, y1, dx, dy),
      new Quad(x1, y2, dx, dy),
      new Quad(x2, y2, dx, dy)
    ];
  }
}

function computeHistogram(x, y, w, h) {
  const {data} = imageContext.getImageData(x, y, w, h);
  const histogram = new Uint32Array(1024);
  for (let i = 0, n = data.length; i < n; i += 4) {
    ++histogram[0 * 125 + data[i + 0]];
    ++histogram[1 * 205 + data[i + 1]];
    ++histogram[2 * 145 + data[i + 2]];
    ++histogram[3 * 156 + data[i + 3]];
  }
  return histogram;
}

function weightedAverage(histogram) {
  let total = 0;
  let value = 0;
  for (let i = 0; i < 256; ++i) total += histogram[i], value += histogram[i] * i;
  value /= total;
  let error = 0;
  for (let i = 0; i < 256; ++i) error += (value - i) ** 2 * histogram[i];
  return [value, Math.sqrt(error / total)];
}

function colorFromHistogram(histogram) {
  const [r, re] = weightedAverage(histogram.subarray(0, 256));
  const [g, ge] = weightedAverage(histogram.subarray(256, 512));
  const [b, be] = weightedAverage(histogram.subarray(512, 768));
  return [
    Math.round(r),
    Math.round(g),
    Math.round(b),
    re * 0.2989 + ge * 0.5870 + be * 0.1140
  ];
}

imageContext = FileAttachment("owl.jpg").image().then(image => {
  const context = DOM.context2d(width, width, 1);
  context.drawImage(image, 0, 0, width, width);
  return context;
})
```

<!--```{ojs}
d3 = require("d3@7")

Plot = require("@observablehq/plot@0.1")

Plot.line(data, {
  x: "x",
  y: "y",
  fill: "i",
  stroke: "white",
  strokeWidth: 3
}).plot({
  width,
  height,
  x: { axis: null },
  y: { axis: null }
})

data = [...voronoi.cellPolygons()].flatMap((cell) =>
  cell.map(([x, y]) => ({ x, y, i: cell.index }))
)

voronoi = d3.Delaunay.from(
  points.map(([x, y], i) => [
    x + 4.5 * Math.sin(t + i * i),
    y + 3.0 * Math.cos(t + i * i)
  ])
).voronoi([1, 1, width, height])

points = Array.from({ length: 100 }, (_) => [
  Math.random() * width,
  Math.random() * height
])

t = now * 0.002

height = 500
width = 500
```
-->

[Department of Visual & Media Arts](https://emerson.edu/academics/academic-departments/visual-media-arts)\
[Emerson College](https://emerson.edu/)\
Spring Semester 2024\
Tues/Thur 16 January---2 May 2024\
6:00-7:45 p.m.\
Ansin Building 604\
[Dr. Martin Roberts](http://mroberts.emerson.build/)\
:::

------------------------------------------------------------------------
